<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jmh.mapper.MemberMapper">
	
	<!--  데이터베이스의 컬럼과 VO가 다를때-->
	<!-- <RESULTMAP TYPE="com.jmh.dto.MemberDto" ID="MemberDto">
    	<RESULT PROPERTY="BOARDTYPE" 	COLUMN="BOARD_TYPE"/>
    	<RESULT PROPERTY="BOARDNUM" 	COLUMN="BOARD_NUM"/>
    	<RESULT PROPERTY="BOARDTITLE" 	COLUMN="BOARD_TITLE"/>
    	<RESULT PROPERTY="BOARDCOMMENT" COLUMN="BOARD_COMMENT"/>
    </RESULTMAP> -->
    
<select id="getmemberListM" resultType="com.jmh.dto.MemberDto" parameterType="list">
/*getmemberListM*/
SELECT 
		MEMBER_ID ,
		MEMBER_NAME ,
		NVL(
		CASE
			WHEN MEMBER_SEX = 'NULL' THEN '미정'
			WHEN MEMBER_SEX = 'D011' THEN '남자'
            WHEN MEMBER_SEX = 'D012' THEN '여자'
		END, 
		'미정')
		AS MEMBER_SEX ,
		NVL(
		CASE
			WHEN MEMBER_POSITION = 'NULL' THEN '미정'
			WHEN MEMBER_POSITION = 'D028' THEN '사원'
			WHEN MEMBER_POSITION = 'D027' THEN '대리'
			WHEN MEMBER_POSITION = 'D026' THEN '과장'
			WHEN MEMBER_POSITION = 'D025' THEN '차장'
			WHEN MEMBER_POSITION = 'D024' THEN '부장'
			WHEN MEMBER_POSITION = 'D023' THEN '이사'
			WHEN MEMBER_POSITION = 'D022' THEN '상무'
			WHEN MEMBER_POSITION = 'D021' THEN '사장'
		END, 
		'미정')
		AS MEMBER_POSITION ,
		NVL(
		CASE
			WHEN MEMBER_DEPARTMENT = 'NULL' THEN '미정'
			WHEN MEMBER_DEPARTMENT = 'A020' THEN '경영지원부'
			WHEN MEMBER_DEPARTMENT = 'A021' THEN '인사부'
			WHEN MEMBER_DEPARTMENT = 'A022' THEN 'IT부'
			WHEN MEMBER_DEPARTMENT = 'A023' THEN '마케팅부'
		END, 
		'미정')
		AS MEMBER_DEPARTMENT ,
        MEMBER_TEL ,
        NVL(
		CASE
			WHEN MEMBER_SKILL_LANGUAGE = 'NULL' THEN '미정'
			WHEN MEMBER_SKILL_LANGUAGE = 'S010' THEN 'JAVA'
			WHEN MEMBER_SKILL_LANGUAGE = 'S011' THEN 'PYTHON'
			WHEN MEMBER_SKILL_LANGUAGE = 'S012' THEN 'C++'
			WHEN MEMBER_SKILL_LANGUAGE = 'S013' THEN 'RUBY'
		END, 
		'미정')
		AS MEMBER_SKILL_LANGUAGE ,
		NVL(
		CASE
			WHEN MEMBER_SKILL_DB = 'NULL' THEN '미정'
			WHEN MEMBER_SKILL_DB = 'S020' THEN 'ORACLE'
			WHEN MEMBER_SKILL_DB = 'S021' THEN 'MSSQL'
			WHEN MEMBER_SKILL_DB = 'S022' THEN 'MYSQL'
			WHEN MEMBER_SKILL_DB = 'S023' THEN 'POSTGRESQL'
		END,
		'미정')
		AS MEMBER_SKILL_DB ,
		MEMBER_STARTDATE ,
		MEMBER_ENDDATE ,
		NVL(
		CASE
			WHEN MEMBER_STATUS = 'S01' THEN '대기중'
			WHEN MEMBER_STATUS = 'S02' THEN '파견중'
			WHEN MEMBER_STATUS = 'S03' THEN '휴가중'
			WHEN MEMBER_STATUS = 'S04' THEN '퇴사'
			WHEN MEMBER_STATUS = 'NULL' THEN '대기중'
			WHEN MEMBER_STATUS = '' THEN '대기중'
		END, 
		'미정')
		AS MEMBER_STATUS
FROM   
		(
			SELECT   
					MEMBER_ID ,
					MEMBER_NAME ,
					MEMBER_SEX ,
					MEMBER_POSITION ,
					MEMBER_DEPARTMENT ,
					MEMBER_TEL ,
					MEMBER_SKILL_LANGUAGE ,
					MEMBER_SKILL_DB ,
					MEMBER_STARTDATE ,
					MEMBER_ENDDATE ,
					MEMBER_STATUS ,
					ROW_NUMBER() OVER(ORDER BY MEMBER_ID DESC) AS NUMROW ,
					COUNT(*) OVER() AS TOTAL_CNT
			FROM     
					MEMBER 
		)
WHERE MEMBER_ID IN
<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
        #{item}
</foreach>
ORDER BY
			MEMBER_ID DESC
<!-- NUMROW BETWEEN #{startNo} AND #{endNo}  -->
</select>    
<select id="loginCk" resultType="com.jmh.dto.MemberDto">
  SELECT 
		MEMBER_ID
		,CASE
          	WHEN MEMBER_DEPARTMENT = 'A020' THEN '경영지원부'
            WHEN MEMBER_DEPARTMENT = 'A021' THEN '인사부'
            WHEN MEMBER_DEPARTMENT = 'A022' THEN 'IT부'
            WHEN MEMBER_DEPARTMENT = 'A023' THEN '마케팅부'
          END AS MEMBER_DEPARTMENT
        ,MEMBER_PW
  FROM 
  		MEMBER
  WHERE 
  		MEMBER_ID=#{member_Id} AND MEMBER_PW=#{member_Pw}
</select>
	
	
	 <select id="getFilterd_search_mem_List" resultType="com.jmh.dto.MemberDto">
	 /* getFilterd_search_mem_List */
		SELECT
		 MEMBER_NO  
		  ,MEMBER_ID
		  ,MEMBER_NAME 
		  ,CASE
            WHEN MEMBER_SEX = 'D011' THEN '남자'
            WHEN MEMBER_SEX = 'D012' THEN '여자'
          END AS MEMBER_SEX
          ,CASE
            WHEN MEMBER_POSITION = 'D028' THEN '사원'
            WHEN MEMBER_POSITION = 'D027' THEN '대리'
            WHEN MEMBER_POSITION = 'D026' THEN '과장'
            WHEN MEMBER_POSITION = 'D025' THEN '차장'
            WHEN MEMBER_POSITION = 'D024' THEN '부장'
            WHEN MEMBER_POSITION = 'D023' THEN '이사'
            WHEN MEMBER_POSITION = 'D022' THEN '상무'
            WHEN MEMBER_POSITION = 'D021' THEN '사장'
          END AS MEMBER_POSITION
          ,CASE
          	WHEN MEMBER_DEPARTMENT = 'A020' THEN '경영지원부'
            WHEN MEMBER_DEPARTMENT = 'A021' THEN '인사부'
            WHEN MEMBER_DEPARTMENT = 'A022' THEN 'IT부'
            WHEN MEMBER_DEPARTMENT = 'A023' THEN '마케팅부'
          END AS MEMBER_DEPARTMENT
		  ,MEMBER_TEL
		  ,CASE
            WHEN MEMBER_SKILL_LANGUAGE = 'S010' THEN 'JAVA'
            WHEN MEMBER_SKILL_LANGUAGE = 'S011' THEN 'PYTHON'
            WHEN MEMBER_SKILL_LANGUAGE = 'S012' THEN 'C++'
            WHEN MEMBER_SKILL_LANGUAGE = 'S013' THEN 'RUBY'
          END AS MEMBER_SKILL_LANGUAGE
          ,CASE
            WHEN MEMBER_SKILL_DB = 'S020' THEN 'ORACLE'
            WHEN MEMBER_SKILL_DB = 'S021' THEN 'MSSQL'
            WHEN MEMBER_SKILL_DB = 'S022' THEN 'MYSQL'
            WHEN MEMBER_SKILL_DB = 'S023' THEN 'POSTGRESQL'
          END AS MEMBER_SKILL_DB
		  ,MEMBER_STARTDATE
		  ,CASE
            WHEN MEMBER_STATUS = 'S01' THEN '대기중'
            WHEN MEMBER_STATUS = 'S02' THEN '파견중'
            WHEN MEMBER_STATUS = 'S03' THEN '휴가중'
            WHEN MEMBER_STATUS = 'S04' THEN '퇴사'
            WHEN MEMBER_STATUS = 'null' THEN '대기중'
            WHEN MEMBER_STATUS = '' THEN '대기중'
          END AS MEMBER_STATUS
		  
		FROM 
		(
			SELECT
		   		MEMBER_NO
		      	,MEMBER_ID
		  		,MEMBER_NAME
		  		,MEMBER_SEX
		  		,MEMBER_POSITION
		  		,MEMBER_DEPARTMENT
		  		,MEMBER_TEL
		  		,MEMBER_SKILL_LANGUAGE
		  		,MEMBER_SKILL_DB
		  		,MEMBER_STARTDATE
		  		,MEMBER_STATUS
		      	,ROW_NUMBER() OVER(ORDER BY MEMBER_NO DESC) AS NUMROW
		      	,COUNT(*) OVER() AS TOTAL_CNT
			FROM
				MEMBER
		)
		WHERE 
			NUMROW BETWEEN #{cri.startNo} AND #{cri.endNo}
	</select>	
	
	<select id="getFilterd_mem_List" resultType="com.jmh.dto.MemberDto">
	/*getFilterd_mem_List*/
		SELECT
		 MEMBER_NO  
		  ,MEMBER_ID
		  ,MEMBER_NAME 
		  ,CASE
            WHEN MEMBER_SEX = 'D011' THEN '남자'
            WHEN MEMBER_SEX = 'D012' THEN '여자'
          END AS MEMBER_SEX
          ,CASE
            WHEN MEMBER_POSITION = 'D028' THEN '사원'
            WHEN MEMBER_POSITION = 'D027' THEN '대리'
            WHEN MEMBER_POSITION = 'D026' THEN '과장'
            WHEN MEMBER_POSITION = 'D025' THEN '차장'
            WHEN MEMBER_POSITION = 'D024' THEN '부장'
            WHEN MEMBER_POSITION = 'D023' THEN '이사'
            WHEN MEMBER_POSITION = 'D022' THEN '상무'
            WHEN MEMBER_POSITION = 'D021' THEN '사장'
          END AS MEMBER_POSITION
          ,CASE
          	WHEN MEMBER_DEPARTMENT = 'A020' THEN '경영지원부'
            WHEN MEMBER_DEPARTMENT = 'A021' THEN '인사부'
            WHEN MEMBER_DEPARTMENT = 'A022' THEN 'IT부'
            WHEN MEMBER_DEPARTMENT = 'A023' THEN '마케팅부'
          END AS MEMBER_DEPARTMENT
		  ,MEMBER_TEL
		  ,CASE
            WHEN MEMBER_SKILL_LANGUAGE = 'S010' THEN 'JAVA'
            WHEN MEMBER_SKILL_LANGUAGE = 'S011' THEN 'PYTHON'
            WHEN MEMBER_SKILL_LANGUAGE = 'S012' THEN 'C++'
            WHEN MEMBER_SKILL_LANGUAGE = 'S013' THEN 'RUBY'
          END AS MEMBER_SKILL_LANGUAGE
          ,CASE
            WHEN MEMBER_SKILL_DB = 'S020' THEN 'ORACLE'
            WHEN MEMBER_SKILL_DB = 'S021' THEN 'MSSQL'
            WHEN MEMBER_SKILL_DB = 'S022' THEN 'MYSQL'
            WHEN MEMBER_SKILL_DB = 'S023' THEN 'POSTGRESQL'
          END AS MEMBER_SKILL_DB
		  ,MEMBER_STARTDATE
		  ,CASE
            WHEN MEMBER_STATUS = 'S01' THEN '대기중'
            WHEN MEMBER_STATUS = 'S02' THEN '파견중'
            WHEN MEMBER_STATUS = 'S03' THEN '휴가중'
            WHEN MEMBER_STATUS = 'S04' THEN '퇴사'
            WHEN MEMBER_STATUS = 'null' THEN '대기중'
            WHEN MEMBER_STATUS = '' THEN '대기중'
          END AS MEMBER_STATUS
		FROM
		(
			SELECT
		   		MEMBER_NO
		      	,MEMBER_ID
		  		,MEMBER_NAME
		  		,MEMBER_SEX
		  		,MEMBER_POSITION
		  		,MEMBER_DEPARTMENT
		  		,MEMBER_TEL
		  		,MEMBER_SKILL_LANGUAGE
		  		,MEMBER_SKILL_DB
		  		,MEMBER_STARTDATE
		  		,MEMBER_STATUS
		      	,ROW_NUMBER() OVER(ORDER BY MEMBER_NO DESC) AS NUMROW
		      	,COUNT(*) OVER() AS TOTAL_CNT
			FROM
				MEMBER
		)M
		WHERE NOT EXISTS(
			SELECT 1
			FROM
				PROJECT_DETAIL PD
			WHERE
				PD.MEMBER_ID = M.MEMBER_ID
			AND
				PD.PROJECT_ID = #{project_Id}
		)
		AND
			NUMROW BETWEEN #{cri.startNo} AND #{cri.endNo}
	</select>
	
<!-- NVL(P.PROJECT_ENDDATE, '1900-01-01') AS PROJECT_ENDDATE	 -->
<!-- 1. 조회(검색어 X) -->
<select id="getmemberList" resultType="com.jmh.dto.MemberDto">
/*getmemberList*/
SELECT 
		MEMBER_ID ,
		MEMBER_NAME ,
		NVL(
		CASE
			WHEN MEMBER_SEX = 'NULL' THEN '미정'
			WHEN MEMBER_SEX = 'D011' THEN '남자'
            WHEN MEMBER_SEX = 'D012' THEN '여자'
		END, 
		'미정')
		AS MEMBER_SEX ,
		NVL(
		CASE
			WHEN MEMBER_POSITION = 'NULL' THEN '미정'
			WHEN MEMBER_POSITION = 'D028' THEN '사원'
			WHEN MEMBER_POSITION = 'D027' THEN '대리'
			WHEN MEMBER_POSITION = 'D026' THEN '과장'
			WHEN MEMBER_POSITION = 'D025' THEN '차장'
			WHEN MEMBER_POSITION = 'D024' THEN '부장'
			WHEN MEMBER_POSITION = 'D023' THEN '이사'
			WHEN MEMBER_POSITION = 'D022' THEN '상무'
			WHEN MEMBER_POSITION = 'D021' THEN '사장'
		END, 
		'미정')
		AS MEMBER_POSITION ,
		NVL(
		CASE
			WHEN MEMBER_DEPARTMENT = 'NULL' THEN '미정'
			WHEN MEMBER_DEPARTMENT = 'A020' THEN '경영지원부'
            WHEN MEMBER_DEPARTMENT = 'A021' THEN '인사부'
            WHEN MEMBER_DEPARTMENT = 'A022' THEN 'IT부'
            WHEN MEMBER_DEPARTMENT = 'A023' THEN '마케팅부'
		END, 
		'미정')
		AS MEMBER_DEPARTMENT ,
        MEMBER_TEL ,
        NVL(
		CASE
			WHEN MEMBER_SKILL_LANGUAGE = 'NULL' THEN '미정'
			WHEN MEMBER_SKILL_LANGUAGE = 'S010' THEN 'JAVA'
			WHEN MEMBER_SKILL_LANGUAGE = 'S011' THEN 'PYTHON'
			WHEN MEMBER_SKILL_LANGUAGE = 'S012' THEN 'C++'
			WHEN MEMBER_SKILL_LANGUAGE = 'S013' THEN 'RUBY'
		END, 
		'미정')
		AS MEMBER_SKILL_LANGUAGE ,
		NVL(
		CASE
			WHEN MEMBER_SKILL_DB = 'NULL' THEN '미정'
			WHEN MEMBER_SKILL_DB = 'S020' THEN 'ORACLE'
			WHEN MEMBER_SKILL_DB = 'S021' THEN 'MSSQL'
			WHEN MEMBER_SKILL_DB = 'S022' THEN 'MYSQL'
			WHEN MEMBER_SKILL_DB = 'S023' THEN 'POSTGRESQL'
		END,
		'미정')
		AS MEMBER_SKILL_DB ,
		MEMBER_STARTDATE ,
		MEMBER_ENDDATE ,
		NVL(
		CASE
			WHEN MEMBER_STATUS = 'S01' THEN '대기중'
			WHEN MEMBER_STATUS = 'S02' THEN '파견중'
			WHEN MEMBER_STATUS = 'S03' THEN '휴가중'
			WHEN MEMBER_STATUS = 'S04' THEN '퇴사'
			WHEN MEMBER_STATUS = 'NULL' THEN '대기중'
			WHEN MEMBER_STATUS = '' THEN '대기중'
		END, 
		'미정')
		AS MEMBER_STATUS
FROM   
		(
			SELECT   
					MEMBER_ID ,
					MEMBER_NAME ,
					MEMBER_SEX ,
					MEMBER_POSITION ,
					MEMBER_DEPARTMENT ,
					MEMBER_TEL ,
					MEMBER_SKILL_LANGUAGE ,
					MEMBER_SKILL_DB ,
					MEMBER_STARTDATE ,
					MEMBER_ENDDATE ,
					MEMBER_STATUS ,
					ROW_NUMBER() OVER(ORDER BY MEMBER_ID DESC) AS NUMROW ,
					COUNT(*) OVER() AS TOTAL_CNT
			FROM     
					MEMBER 
		)
	
WHERE 
		NUMROW BETWEEN #{startNo} AND #{endNo}
</select>
	
<!-- 1. 조회(검색어 O) -->
<select id="searchmemberList" resultType="com.jmh.dto.MemberDto"><!-- parameterType="com.jmh.vo.memberVO" -->
/*searchmemberList*/
SELECT MEMBER_ID ,
       MEMBER_NAME ,
       NVL(
       CASE
			WHEN MEMBER_SEX = 'NULL' THEN '미정'
            WHEN MEMBER_SEX = 'D011' THEN '남자'
            WHEN MEMBER_SEX = 'D012' THEN '여자'
       END, 
       '미정')
       AS MEMBER_SEX ,
       NVL(
       CASE
       		WHEN MEMBER_POSITION = 'NULL' THEN '미정'
            WHEN MEMBER_POSITION = 'D028' THEN '사원'
            WHEN MEMBER_POSITION = 'D027' THEN '대리'
            WHEN MEMBER_POSITION = 'D026' THEN '과장'
            WHEN MEMBER_POSITION = 'D025' THEN '차장'
            WHEN MEMBER_POSITION = 'D024' THEN '부장'
            WHEN MEMBER_POSITION = 'D023' THEN '이사'
            WHEN MEMBER_POSITION = 'D022' THEN '상무'
            WHEN MEMBER_POSITION = 'D021' THEN '사장'
       END, 
       '미정')
       AS MEMBER_POSITION ,
       NVL(
       CASE
       		WHEN MEMBER_DEPARTMENT = 'NULL' THEN '미정'
			WHEN MEMBER_DEPARTMENT = 'A020' THEN '경영지원부'
            WHEN MEMBER_DEPARTMENT = 'A021' THEN '인사부'
            WHEN MEMBER_DEPARTMENT = 'A022' THEN 'IT부'
            WHEN MEMBER_DEPARTMENT = 'A023' THEN '마케팅부'
       END, 
       '미정')
       AS MEMBER_DEPARTMENT ,
       MEMBER_TEL ,
       NVL(
       CASE
			WHEN MEMBER_SKILL_LANGUAGE = 'NULL' THEN '미정'
            WHEN MEMBER_SKILL_LANGUAGE = 'S011' THEN 'PYTHON'
            WHEN MEMBER_SKILL_LANGUAGE = 'S012' THEN 'C++'
            WHEN MEMBER_SKILL_LANGUAGE = 'S013' THEN 'RUBY'
       END, 
       '미정')
       AS MEMBER_SKILL_LANGUAGE ,
       NVL(
       CASE
       		WHEN MEMBER_SKILL_DB = 'NULL' THEN '미정'
            WHEN MEMBER_SKILL_DB = 'S020' THEN 'ORACLE'
            WHEN MEMBER_SKILL_DB = 'S021' THEN 'MSSQL'
            WHEN MEMBER_SKILL_DB = 'S022' THEN 'MYSQL'
            WHEN MEMBER_SKILL_DB = 'S023' THEN 'POSTGRESQL'
       END, 
       '미정')
       AS MEMBER_SKILL_DB ,
       MEMBER_STARTDATE ,
       MEMBER_ENDDATE ,
       NVL(
       CASE
       		
            WHEN MEMBER_STATUS = 'S01' THEN '대기중'
            WHEN MEMBER_STATUS = 'S02' THEN '파견중'
            WHEN MEMBER_STATUS = 'S03' THEN '휴가중'
            WHEN MEMBER_STATUS = 'S04' THEN '퇴사'
       END,
       '미정')
       AS MEMBER_STATUS
FROM   (
                SELECT   MEMBER_ID ,
                         MEMBER_NAME ,
                         MEMBER_SEX ,
                         MEMBER_POSITION ,
                         MEMBER_DEPARTMENT ,
                         MEMBER_TEL ,
                         MEMBER_SKILL_LANGUAGE ,
                         MEMBER_SKILL_DB ,
                         MEMBER_STARTDATE ,
                         MEMBER_ENDDATE ,
                         MEMBER_STATUS ,
                         ROW_NUMBER() OVER(ORDER BY MEMBER_ID DESC) AS NUMROW ,
                         COUNT(*) OVER()                            AS TOTAL_CNT
                FROM     MEMBER 
<include refid="criteria"></include> 
        )
WHERE NUMROW BETWEEN #{startNo} AND #{endNo}
</select>
	
<!-- 1. 조회(페이징 정보) -->
<select id="getTotalCnt" resultType="integer"  parameterType="integer">
		
	<if test="searchWord == null and search_startDate == null and search_endDate == null">
	SELECT 
			COUNT(*) 
	FROM 
			MEMBER
	</if>
	
	<if test="searchWord != null or search_startDate != null or search_endDate != null">
	SELECT 
			COUNT(*) 
	FROM 
			MEMBER
	<include refid="criteria"></include>
	</if>	
</select>
	
<!-- 2. 등록(아이디 체크) -->
<select id="checkId" resultType="boolean"><!-- parameterType="String" -->
SELECT 
		COUNT(*)
FROM 
		MEMBER 
WHERE 
		MEMBER_ID = #{member_Id}
</select>

<!-- 2. 등록(전화번호 체크) -->
<select id="checkTel" resultType="boolean"><!-- parameterType="String" -->
SELECT 
		COUNT(*)
FROM 
		MEMBER 
WHERE 
		MEMBER_TEL = #{member_Tel}
</select>
		
		
<!-- 2. 등록(회원 등록) -->
<insert id="insertMember" parameterType="com.jmh.dto.MemberDto">
/*insertMember*/
INSERT 
INTO 
		MEMBER
				(
					MEMBER_ID,
		  			MEMBER_NAME,
		  			MEMBER_SEX,
		  			MEMBER_POSITION,
		  			MEMBER_DEPARTMENT,
		  			MEMBER_TEL,
		  			MEMBER_SKILL_LANGUAGE,
		  			MEMBER_SKILL_DB,
		  			MEMBER_STARTDATE
		  		) 
VALUES 
		(
			(
				SELECT 
		  				TO_NUMBER(NVL(MAX(MEMBER_ID), 00000000))+ 1 
		  		FROM 
		  				MEMBER
		  	)	
		  		,#{member_Name}
		  		,#{member_Sex}
		  		,#{member_Position}
		  		,#{member_Department}
		  		,#{member_Tel}
		  		,#{member_Skill_Language}
		  		,#{member_Skill_DB}
		  		,#{member_startDate}
		 )
</insert>
	
<!-- 3. 수정(페이지 이동 + 회원 정보 조회) -->
<select id="getModifyList" resultType="com.jmh.dto.MemberDto" parameterType="integer">
SELECT 
		MEMBER_ID ,
		MEMBER_NAME ,
		NVL(
		CASE
				WHEN MEMBER_SEX = 'NULL' THEN '미정'
				WHEN MEMBER_SEX = 'D011' THEN '남자'
            	WHEN MEMBER_SEX = 'D012' THEN '여자'
		END, 
		'미정')
		AS MEMBER_SEX ,
		NVL(
        CASE
				WHEN MEMBER_POSITION = 'NULL' THEN '미정'
            	WHEN MEMBER_POSITION = 'D028' THEN '사원'
            	WHEN MEMBER_POSITION = 'D027' THEN '대리'
            	WHEN MEMBER_POSITION = 'D026' THEN '과장'
            	WHEN MEMBER_POSITION = 'D025' THEN '차장'
            	WHEN MEMBER_POSITION = 'D024' THEN '부장'
            	WHEN MEMBER_POSITION = 'D023' THEN '이사'
            	WHEN MEMBER_POSITION = 'D022' THEN '상무'
            	WHEN MEMBER_POSITION = 'D021' THEN '사장'
		END,
		'미정')
		AS MEMBER_POSITION ,
		NVL(
		CASE
			WHEN MEMBER_DEPARTMENT = 'NULL' THEN '미정'
			WHEN MEMBER_DEPARTMENT = 'A020' THEN '경영지원부'
            WHEN MEMBER_DEPARTMENT = 'A021' THEN '인사부'
            WHEN MEMBER_DEPARTMENT = 'A022' THEN 'IT부'
            WHEN MEMBER_DEPARTMENT = 'A023' THEN '마케팅부'
		END, 
		'미정')
		AS MEMBER_DEPARTMENT ,
		MEMBER_TEL ,
		NVL(
		CASE
			WHEN MEMBER_SKILL_LANGUAGE = 'NULL' THEN '미정'
            WHEN MEMBER_SKILL_LANGUAGE = 'S010' THEN 'JAVA'
            WHEN MEMBER_SKILL_LANGUAGE = 'S011' THEN 'PYTHON'
            WHEN MEMBER_SKILL_LANGUAGE = 'S012' THEN 'C++'
            WHEN MEMBER_SKILL_LANGUAGE = 'S013' THEN 'RUBY'
		END, 
		'미정')
		AS MEMBER_SKILL_LANGUAGE ,
        NVL(
        CASE
        	WHEN MEMBER_SKILL_DB = 'NULL' THEN '미정'
            WHEN MEMBER_SKILL_DB = 'S020' THEN 'ORACLE'
            WHEN MEMBER_SKILL_DB = 'S021' THEN 'MSSQL'
            WHEN MEMBER_SKILL_DB = 'S022' THEN 'MYSQL'
            WHEN MEMBER_SKILL_DB = 'S023' THEN 'POSTGRESQL'
		END, 
		'미정')
		AS MEMBER_SKILL_DB ,
		MEMBER_STARTDATE ,
		<!-- ,NVL(MEMBER_ENDDATE,'1900-01-01') AS MEMBER_ENDDATE  -->
		MEMBER_ENDDATE
FROM 
		MEMBER
WHERE 
		MEMBER_ID = #{member_Id}
</select>
	
<!-- 3. 수정(전화번호 중복체크) -->
<select id="member_Tel_ck" resultType="integer" parameterType="List"> <!-- parameterType="String"  -->
SELECT
		COUNT(*)
FROM
		MEMBER
WHERE 
		MEMBER_TEL = #{member_Tel} and member_Id = #{member_Id}
</select>
	
<!-- 3. 수정(회원 정보 수정) -->
<update id="memberModify" parameterType="com.jmh.dto.MemberDto">
	<if test="member_endDate != null">
	UPDATE 
			MEMBER 
	SET 
			MEMBER_NAME = #{member_Name}
			,MEMBER_SEX = #{member_Sex}
			,MEMBER_POSITION = #{member_Position}
			,MEMBER_DEPARTMENT = #{member_Department}
			,MEMBER_TEL = #{member_Tel} 
			,MEMBER_SKILL_LANGUAGE = #{member_Skill_Language} 
			,MEMBER_SKILL_DB = #{member_Skill_DB} 
			,MEMBER_STARTDATE = #{member_startDate}
			,MEMBER_ENDDATE = #{member_endDate}
			,MEMBER_STATUS = 'S04'
	WHERE 
			MEMBER_ID = #{member_Id}
	</if>
	
	<if test="member_endDate == null">
	UPDATE 
			MEMBER 
	SET 
			MEMBER_NAME = #{member_Name}
			,MEMBER_SEX = #{member_Sex}
			,MEMBER_POSITION = #{member_Position}
			,MEMBER_DEPARTMENT = #{member_Department}
			,MEMBER_TEL = #{member_Tel} 
			,MEMBER_SKILL_LANGUAGE = #{member_Skill_Language} 
			,MEMBER_SKILL_DB = #{member_Skill_DB} 
			,MEMBER_STARTDATE = #{member_startDate}
			,MEMBER_ENDDATE = NULL
	WHERE 
			MEMBER_ID = #{member_Id}
	</if>
</update>

<!-- <select id="member_Tel_ck_M" resultType="integer" parameterType="List"> parameterType="String" 
SELECT
		COUNT(*)
FROM
		MEMBER
WHERE 
		MEMBER_TEL = #{member_Tel} and member_Id = #{member_Id}
</select> -->

<!-- 3. 수정(다중 회원 정보 수정) -->
<update id="memberModify_M" parameterType="java.util.Map">
    <!-- resultMap에서 "modifyDatas" 키를 사용하여 데이터 추출 -->
    <foreach item="member" index="index" collection="modifyDatas" open="DECLARE BEGIN" separator=";" close="; END;">
        UPDATE MEMBER
        SET
            MEMBER_NAME = #{member.member_Name},
            MEMBER_SEX = #{member.member_Sex},
            MEMBER_POSITION = #{member.member_Position},
            MEMBER_DEPARTMENT = #{member.member_Department},
            MEMBER_TEL = #{member.member_Tel},
            MEMBER_SKILL_LANGUAGE = #{member.member_Skill_Language},
            MEMBER_SKILL_DB = #{member.member_Skill_DB},
            MEMBER_STARTDATE = #{member.member_startDate},
            MEMBER_ENDDATE = #{member.member_endDate}
        WHERE
            MEMBER_ID = #{member.member_Id}
    </foreach>
</update>

<!-- 4. 삭제(삭제 체크) -->
<!-- <select id="deleteMemberM_ck" resultType="boolean" parameterType="list">parameterType="String"
/* deleteMemberM_ck */
<foreach item="member_Id" collection="list" open="(" separator="," close=")">
SELECT 
		COUNT(*)
FROM 
		MEMBER M
JOIN
        PROJECT_DETAIL P
ON 
        M.MEMBER_ID = P.MEMBER_ID
WHERE
        P.MEMBER_ID = #{list[member_Id]} 
</foreach>
</select> -->
<!-- <select id="deleteMemberM_ck" resultType="Integer" parameterType="java.util.List">
    <foreach collection="list" item="member_Id" index="index" open="(" separator="," close=")"> 
        SELECT 
        		COUNT(*)
        FROM 
        		MEMBER M
        JOIN
        		PROJECT_DETAIL P
        ON 
        		M.MEMBER_ID = P.MEMBER_ID
        WHERE
        		P.MEMBER_ID = #{member_Id} 
    </foreach>
</select> -->
<!-- <select id="member_Tel_ck_M" resultType="String" parameterType="java.util.List">
		SELECT
				COUNT(*)
		FROM
				MEMBER
		WHERE 
				MEMBER_TEL = #{member_Tel} and member_Id = #{member_Id}
</select> -->
<select id="member_Tel_ck_M" resultType="String" parameterType="java.util.List">
    <foreach item="member" index="index" collection="modifyList" open="(" separator="," close=")">
    SELECT 
    		COUNT(*)
    FROM 
    		MEMBER
    WHERE 
    		MEMBER_TEL IN #{member.member_Tel}
    </foreach>
</select>

<select id="deleteMemberM_ck" resultType="String" parameterType="java.util.List">
    <foreach collection="list" item="member_Id" index="index" separator=" UNION ALL "> 
        SELECT 
        		COUNT(*)
        FROM 
        		MEMBER M
        JOIN
        		PROJECT_DETAIL P
        ON 
        		M.MEMBER_ID = P.MEMBER_ID
        WHERE
        		P.MEMBER_ID = #{member_Id} 
    </foreach>
</select> 
<!-- 4. 삭제(회원 정보 삭제) -->
<delete id="deleteMember" parameterType="list" >
/*deleteMember*/
DELETE 
FROM
		MEMBER
WHERE 
		MEMBER_ID 
IN
<foreach item="member_Id" collection="list" open="(" separator="," close=")">
	#{member_Id}
</foreach>
</delete>
	
<select id="getmemberprojectList" resultType="com.jmh.dto.ProjectDto" parameterType="integer">
SELECT
   		P.PROJECT_ID,
   		P.PROJECT_NAME,
   		PD.PUSHDATE,
   		PD.PULLDATE
FROM 
		PROJECT P
JOIN
		PROJECT_DETAIL PD
ON
		P.PROJECT_ID = PD.PROJECT_ID
JOIN
       	MEMBER M
ON
       	M.MEMBER_ID = PD.MEMBER_ID
WHERE
       	PD.MEMBER_ID = #{member_Id}
</select>

	<delete id="memberDelete2" parameterType="int">
		DELETE 
		FROM 
			PROJECT_DETAIL
		WHERE 
			MEMBER_ID = #{member_Id}
		AND
			PROJECT_ID = #{project_Id}
	</delete>
	<!-- 
	SELECT 
    	M.MEMBER_ID
    	,PD.PROJECT_ID
    	,PD.PROJECT_NAME
    	,PD.PUSHDATE
    	,PD.PULLDATE
	FROM 
    	MEMBER M
	JOIN
    	PROJECT_DETAIL PD
	ON
    	M.MEMBER_ID = PD.MEMBER_ID
	WHERE 
    	PD.MEMBER_ID = #{member_Id}
	
	 -->
	
	
	<select id="getmemberId" resultType="com.jmh.dto.MemberDto">
		SELECT MEMBER_ID FROM MEMBER WHERE MEMBER_ID=#{member_Id}
	</select>

	<insert id = "projectDetailInsert2" parameterType="com.jmh.dto.ProjectDetailDto">
		INSERT 
   			INTO 
        		PROJECT_DETAIL
                            (
                                 MEMBER_ID
                                ,MEMBER_NAME
                                ,PROJECT_ID
                                ,PROJECT_NAME
                                ,PUSHDATE
                                ,PULLDATE
                            )
        
		 VALUES
    		(
        		
        		#{member_Id},
        		#{member_Name},
        		#{project_Id},
        		#{project_Name},
        		#{pushDate},
        		#{pullDate}
    		)
	</insert>

	
	        		<!-- <if test="pullDate != null">
            		#{pullDate}
        		</if>
        		<if test="pullDate == null">
					''
        		</if> -->
	
	<!-- 20/05/06 과 같이 값이 보일 뿐, 실제 값이 YY/MM/DD 로 저장된게 아닙니다.
뷰단에 원하는 포맷으로 출력을 원하시면

	 -->

<update id="memberModify2" parameterType="com.jmh.dto.ProjectDetailDto">
	UPDATE 
   		PROJECT_DETAIL
   	SET
		PUSHDATE = #{pushDate},
		PULLDATE = #{pullDate}
	WHERE 
		MEMBER_ID = #{member_Id}
	AND
		PROJECT_ID = #{project_Id}
	
</update>


<!-- 팝업창 관련 -->
<!-- <insert id = "projectDetailInsert" parameterType="com.jmh.dto.ProjectDetailDto">
		INSERT 
		INTO 
		PROJECT_DETAIL
		(
        	MEMBER_ID
            ,MEMBER_NAME
            ,PROJECT_ID
            ,PROJECT_NAME
            ,PUSHDATE
            ,PULLDATE
         )        
		 VALUES
    		(
        		#{member_Id},
        		#{member_Name},
        		#{project_Id},
        		#{project_Name},
        		#{pushDate},
        		#{pullDate}
    		)
</insert> -->
<!-- <insert id = "projectDetailInsert" parameterType="com.jmh.dto.ProjectDetailDto">
INSERT 
INTO 
PROJECT_DETAIL
	(
      	MEMBER_ID
          ,MEMBER_NAME
          ,PROJECT_ID
          ,PROJECT_NAME
          ,PUSHDATE
          ,PULLDATE
	)        
	VALUES
	(
   		#{member_Id},
   		#{member_Name},
   		#{project_Id},
  		#{project_Name},
  		#{pushDate},
   		#{pullDate}
	)
</insert> -->
<insert id="projectDetailInsert" parameterType="list">
    INSERT INTO PROJECT_DETAIL (
        MEMBER_ID,
        MEMBER_NAME,
        PROJECT_ID,
        PROJECT_NAME,
        PUSHDATE,
        PULLDATE
    )
    VALUES
   <!--  <foreach collection="list" item="item" separator=",">
        (
            #{item.member_Id},
            #{item.member_Name},
            #{item.project_Id},
            #{item.project_Name},
            NVL(#{item.pushDate, jdbcType=DATE}, ''), 
            NVL(#{item.pullDate, jdbcType=DATE}, '') 
        )
        
    </foreach> -->
    <foreach collection="list" item="item" separator=",">
        (
            #{item.member_Id},
            #{item.member_Name},
            #{item.project_Id},
            #{item.project_Name},
            <choose>
                <when test="item.pushDate != null">
                    #{item.pushDate, jdbcType=DATE}
                </when>
                <otherwise>
                    '' <!-- 빈 문자열을 대체값으로 사용 -->
                </otherwise>
            </choose>,
            <choose>
                <when test="item.pullDate != null">
                    #{item.pullDate, jdbcType=DATE}
                </when>
                <otherwise>
                    '' <!-- 빈 문자열을 대체값으로 사용 -->
                </otherwise>
            </choose>
        )
    </foreach>
    
</insert>


	
<sql id="criteria">
    <where>
        <if test="searchField == 'name'">
            AND MEMBER_NAME LIKE '%'||#{searchWord}||'%'
        </if>
        <if test="searchField == 'tel'">
            AND MEMBER_TEL LIKE '%'||#{searchWord}||'%'
        </if>
        <if test="search_startDate != null">
            AND MEMBER_STARTDATE = #{search_startDate}
        </if>
         <if test="search_endDate != null">
            AND MEMBER_ENDDATE = #{search_endDate}
        </if>
    </where>
</sql>

</mapper>  
