<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jmh.mapper.MemberMapper">
	
	<!--  데이터베이스의 컬럼과 VO가 다를때-->
	<!-- <RESULTMAP TYPE="com.jmh.dto.MemberDto" ID="MemberDto">
    	<RESULT PROPERTY="BOARDTYPE" 	COLUMN="BOARD_TYPE"/>
    	<RESULT PROPERTY="BOARDNUM" 	COLUMN="BOARD_NUM"/>
    	<RESULT PROPERTY="BOARDTITLE" 	COLUMN="BOARD_TITLE"/>
    	<RESULT PROPERTY="BOARDCOMMENT" COLUMN="BOARD_COMMENT"/>
    </RESULTMAP> -->
	
	<!-- 1. 조회(검색어 X) -->
<select id="getmemberList" resultType="com.jmh.dto.MemberDto">
	/*getmemberList*/
		SELECT
		 MEMBER_NO 
		  ,MEMBER_ID
		  ,MEMBER_NAME
		  ,CASE
            WHEN MEMBER_SEX = 'D011' THEN '남자'
            WHEN MEMBER_SEX = 'D012' THEN '여자'
          END AS MEMBER_SEX
          ,CASE
            WHEN MEMBER_POSITION = 'D028' THEN '사원'
            WHEN MEMBER_POSITION = 'D027' THEN '대리'
            WHEN MEMBER_POSITION = 'D026' THEN '과장'
            WHEN MEMBER_POSITION = 'D025' THEN '차장'
            WHEN MEMBER_POSITION = 'D024' THEN '부장'
            WHEN MEMBER_POSITION = 'D023' THEN '이사'
            WHEN MEMBER_POSITION = 'D022' THEN '상무'
            WHEN MEMBER_POSITION = 'D021' THEN '사장'
          END AS MEMBER_POSITION
		  ,<!-- REGEXP_REPLACE(MEMBER_TEL, '(.{3})(.+)(.{4})', '\1-\2-\3') MEMBER_TEL -->MEMBER_TEL
		  ,CASE
            WHEN MEMBER_SKILL_LANGUAGE = 'S010' THEN 'JAVA'
            WHEN MEMBER_SKILL_LANGUAGE = 'S011' THEN 'PYTHON'
            WHEN MEMBER_SKILL_LANGUAGE = 'S012' THEN 'C++'
            WHEN MEMBER_SKILL_LANGUAGE = 'S013' THEN 'RUBY'
          END AS MEMBER_SKILL_LANGUAGE
          ,CASE
            WHEN MEMBER_SKILL_DB = 'S020' THEN 'ORACLE'
            WHEN MEMBER_SKILL_DB = 'S021' THEN 'MSSQL'
            WHEN MEMBER_SKILL_DB = 'S022' THEN 'MYSQL'
            WHEN MEMBER_SKILL_DB = 'S023' THEN 'POSTGRESQL'
          END AS MEMBER_SKILL_DB
		  ,MEMBER_STARTDATE
		FROM 
		(
		   SELECT
		   		MEMBER_NO
		      	,MEMBER_ID
		  		,MEMBER_NAME
		  		,MEMBER_SEX
		  		,MEMBER_POSITION
		  		,MEMBER_TEL
		  		,MEMBER_SKILL_LANGUAGE
		  		,MEMBER_SKILL_DB
		  		,MEMBER_STARTDATE
		      	,ROW_NUMBER() OVER(ORDER BY MEMBER_NO DESC) AS NUMROW
		      	,COUNT(*) OVER() AS TOTAL_CNT
			FROM
				MEMBER
		)
		WHERE 
			NUMROW BETWEEN #{startNo} AND #{endNo}
		
	</select>
	
	<!-- 1. 조회(검색어 O) -->
<select id="searchmemberList" resultType="com.jmh.dto.MemberDto"><!-- parameterType="com.jmh.vo.memberVO" -->
SELECT 
	MEMBER_NO
	  ,MEMBER_ID
	  ,MEMBER_NAME
	  ,CASE
           WHEN MEMBER_SEX = 'D011' THEN '남자'
           WHEN MEMBER_SEX = 'D012' THEN '여자'
         END AS MEMBER_SEX
         ,CASE
           WHEN MEMBER_POSITION = 'D028' THEN '사원'
           WHEN MEMBER_POSITION = 'D027' THEN '대리'
           WHEN MEMBER_POSITION = 'D026' THEN '과장'
           WHEN MEMBER_POSITION = 'D025' THEN '차장'
           WHEN MEMBER_POSITION = 'D024' THEN '부장'
           WHEN MEMBER_POSITION = 'D023' THEN '이사'
           WHEN MEMBER_POSITION = 'D022' THEN '상무'
           WHEN MEMBER_POSITION = 'D021' THEN '사장'
         END AS MEMBER_POSITION
	  ,MEMBER_TEL
	  ,CASE
           WHEN MEMBER_SKILL_LANGUAGE = 'S010' THEN 'JAVA'
           WHEN MEMBER_SKILL_LANGUAGE = 'S011' THEN 'PYTHON'
           WHEN MEMBER_SKILL_LANGUAGE = 'S012' THEN 'C++'
           WHEN MEMBER_SKILL_LANGUAGE = 'S013' THEN 'RUBY'
         END AS MEMBER_SKILL_LANGUAGE
         ,CASE
           WHEN MEMBER_SKILL_DB = 'S020' THEN 'ORACLE'
           WHEN MEMBER_SKILL_DB = 'S021' THEN 'MSSQL'
           WHEN MEMBER_SKILL_DB = 'S022' THEN 'MYSQL'
           WHEN MEMBER_SKILL_DB = 'S023' THEN 'POSTGRESQL'
         END AS MEMBER_SKILL_DB
	  ,MEMBER_STARTDATE
FROM 
	(
    SELECT
   		MEMBER_NO
      	,MEMBER_ID
  		,MEMBER_NAME
  		,MEMBER_SEX
  		,MEMBER_POSITION
  		,MEMBER_TEL
  		,MEMBER_SKILL_LANGUAGE
 		,MEMBER_SKILL_DB
  		,MEMBER_STARTDATE
      	,ROW_NUMBER() OVER(ORDER BY MEMBER_NO DESC) AS NUMROW
      	,COUNT(*) OVER() AS TOTAL_CNT
	FROM
		MEMBER
			
	<include refid="criteria"></include>	
	)
	WHERE 
		NUMROW BETWEEN #{startNo} AND #{endNo} <!-- AND MEMBER_NAME = #{searchWord} -->
</select>
	
	<!-- REGEXP_REPLACE(MEMBER_TEL, '(.{3})(.+)(.{4})', '\1-\2-\3') MEMBER_TEL -->
	<!-- <when test="searchField == 'name'">
				WHERE MEMBER_NAME LIKE '%'||#{searchWord}||'%'
			</when>
			<when test="searchField == 'tel'">
				WHERE MEMBER_TEL like '%'||#{searchWord}||'%'
			</when>
			<when test="searchField == 'startdate'">
				WHERE MEMBER_STARTDATE like '%'||#{searchWord}||'%'
			</when> -->
				<!-- MEMBER_NAME LIKE '%'||#{searchWord}||'%' -->
				<!-- <include refid="criteria"></include> -->
	
	
	<!-- 1. 조회(페이징 정보) -->
	<select id="getTotalCnt" resultType="integer"  parameterType="integer">
		/*getTotalCnt*/
		
		<if test="searchWord == null and searchDate == null">
		SELECT 
			COUNT(*) 
		FROM 
			MEMBER
		</if>
		
		<if test="searchWord != null or searchDate != null">
		SELECT 
			COUNT(*) 
		FROM 
			MEMBER
			
		<include refid="criteria"></include>
		
		</if>	
	</select>
	
	<!-- 2. 등록(아이디 체크) -->
	<select id="checkId" resultType="boolean"><!-- parameterType="String" -->
		SELECT 
			COUNT(*)
		FROM 
			MEMBER 
		WHERE 
			MEMBER_ID = #{member_Id}
	</select>
	<select id="checkTel" resultType="boolean"><!-- parameterType="String" -->
		SELECT 
			COUNT(*)
		FROM 
			MEMBER 
		WHERE 
			MEMBER_TEL = #{member_Tel}
	</select>
		
	<!-- 2. 등록(회원 등록) -->
	<insert id="insertMember" parameterType="com.jmh.dto.MemberDto">
		/*insertMember*/
		INSERT 
		INTO 
			MEMBER
			(
				MEMBER_NO
				,MEMBER_ID
		  		,MEMBER_NAME
		  		,MEMBER_SEX
		  		,MEMBER_POSITION
		  		,MEMBER_TEL
		  		,MEMBER_SKILL_LANGUAGE
		  		,MEMBER_SKILL_DB
		  		,MEMBER_STARTDATE
		  	) 
		VALUES 
		(
			(
				SELECT 
		  			TO_NUMBER(NVL(MAX(MEMBER_NO), 0))+ 1 
		  		FROM 
		  			MEMBER
		  	)	
		  		,#{member_Id}
		  		,#{member_Name}
		  		,#{member_Sex}
		  		,#{member_Position}
		  		,#{member_Tel}
		  		,#{member_Skill_Language}
		  		,#{member_Skill_DB}
		  		,#{member_startDate}
		 )
	</insert>
	
	<!-- 3. 수정(페이지 이동 + 회원 정보 조회) -->
	<select id="getModifyList" resultType="com.jmh.dto.MemberDto" parameterType="integer">
		SELECT 
			MEMBER_ID
		  ,MEMBER_NAME
		  ,CASE
            WHEN MEMBER_SEX = 'D011' THEN '남자'
            WHEN MEMBER_SEX = 'D012' THEN '여자'
          END AS MEMBER_SEX
          ,CASE
            WHEN MEMBER_POSITION = 'D028' THEN '사원'
            WHEN MEMBER_POSITION = 'D027' THEN '대리'
            WHEN MEMBER_POSITION = 'D026' THEN '과장'
            WHEN MEMBER_POSITION = 'D025' THEN '차장'
            WHEN MEMBER_POSITION = 'D024' THEN '부장'
            WHEN MEMBER_POSITION = 'D023' THEN '이사'
            WHEN MEMBER_POSITION = 'D022' THEN '상무'
            WHEN MEMBER_POSITION = 'D021' THEN '사장'
          END AS MEMBER_POSITION
		  ,<!-- REGEXP_REPLACE(MEMBER_TEL, '(.{3})(.+)(.{4})', '\1-\2-\3') MEMBER_TEL -->MEMBER_TEL
		  ,CASE
            WHEN MEMBER_SKILL_LANGUAGE = 'S010' THEN 'JAVA'
            WHEN MEMBER_SKILL_LANGUAGE = 'S011' THEN 'PYTHON'
            WHEN MEMBER_SKILL_LANGUAGE = 'S012' THEN 'C++'
            WHEN MEMBER_SKILL_LANGUAGE = 'S013' THEN 'RUBY'
          END AS MEMBER_SKILL_LANGUAGE
          ,CASE
            WHEN MEMBER_SKILL_DB = 'S020' THEN 'ORACLE'
            WHEN MEMBER_SKILL_DB = 'S021' THEN 'MSSQL'
            WHEN MEMBER_SKILL_DB = 'S022' THEN 'MYSQL'
            WHEN MEMBER_SKILL_DB = 'S023' THEN 'POSTGRESQL'
          END AS MEMBER_SKILL_DB
		  ,MEMBER_STARTDATE
		  ,MEMBER_ENDDATE	 
		FROM 
			MEMBER
		WHERE 
			MEMBER_ID = #{member_Id}
	</select>
	
	<!-- 3. 수정(전화번호 중복체크) -->
	<select id="member_Tel_ck" resultType="integer"> <!-- parameterType="String"  -->
		SELECT
			COUNT(*)
		FROM
			MEMBER
		WHERE 
			MEMBER_TEL = #{member_Tel} and member_Id = #{member_Id}
	</select>
	
	<!-- 3. 수정(회원 정보 수정) -->
	<update id="memberModify" parameterType="com.jmh.dto.MemberDto">
		<if test="member_endDate != null">
		UPDATE 
			MEMBER 
		SET 
			MEMBER_NAME = #{member_Name}
			,MEMBER_SEX = #{member_Sex}
			,MEMBER_POSITION = #{member_Position}
			,MEMBER_TEL = #{member_Tel} 
			,MEMBER_SKILL_LANGUAGE = #{member_Skill_Language} 
			,MEMBER_SKILL_DB = #{member_Skill_DB} 
			,MEMBER_STARTDATE = #{member_startDate}
			,MEMBER_ENDDATE = #{member_endDate}  
		WHERE 
			MEMBER_ID = #{member_Id}
		</if>
		<if test="member_endDate == null">
		UPDATE 
			MEMBER 
		SET 
			MEMBER_NAME = #{member_Name}
			,MEMBER_SEX = #{member_Sex}
			,MEMBER_POSITION = #{member_Position}
			,MEMBER_TEL = #{member_Tel} 
			,MEMBER_SKILL_LANGUAGE = #{member_Skill_Language} 
			,MEMBER_SKILL_DB = #{member_Skill_DB} 
			,MEMBER_STARTDATE = #{member_startDate}
		WHERE 
			MEMBER_ID = #{member_Id}
		</if>
		
		
	</update>
	
	<!-- 4. 삭제(회원 정보 삭제) -->
	<delete id="deleteMember" parameterType="integer" >
	 	/*deleteMember*/
		DELETE 
		FROM 
			MEMBER
		WHERE 
			MEMBER_ID = #{member_Id}
	</delete>
	
	<!-- <select id="getmemberprojectList" resultType="java.util.Map" parameterType="integer">
	SELECT 
    	M.MEMBER_ID
    	,MP.PROJECT_ID
    	,mp.PROJECT_NAME
    	,MP.PROJECT_SKILL_LANGUAGE
    	,MP.PROJECT_SKILL_DB
    	,MP.PROJECT_STARTDATE
    	,MP.PROJECT_ENDDATE
	FROM 
    	MEMBER M
	JOIN
    	MEMBER_PROJECT MP
	ON
    	M.MEMBER_ID = MP.MEMBER_ID
	WHERE 
    	M.MEMBER_ID = #{member_Id}
	</select> -->
	
	<select id="getmemberprojectList" resultType="com.jmh.dto.ProjectDto" parameterType="integer">
	SELECT 
    	MP.PROJECT_ID
    	,mp.PROJECT_NAME
    	,MP.PROJECT_SKILL_LANGUAGE
    	,MP.PROJECT_SKILL_DB
    	,MP.PROJECT_STARTDATE
    	,MP.PROJECT_ENDDATE
	FROM 
    	MEMBER M
	JOIN
    	MEMBER_PROJECT MP
	ON
    	M.MEMBER_ID = MP.MEMBER_ID
	WHERE 
    	M.MEMBER_ID = #{member_Id}
	</select>
	
	<select id="getmemberId" resultType="com.jmh.dto.MemberDto">
		SELECT MEMBER_ID FROM MEMBER WHERE MEMBER_ID=#{member_Id}
	</select>
	
	<!-- 20/05/06 과 같이 값이 보일 뿐, 실제 값이 YY/MM/DD 로 저장된게 아닙니다.
뷰단에 원하는 포맷으로 출력을 원하시면

	 -->
	
	<!-- <sql id="criteria">
		<choose>
			<when test="searchField == 'name'">
				WHERE MEMBER_NAME LIKE '%'||#{searchWord}||'%'
			</when>
			<when test="searchField == 'tel'">
				WHERE MEMBER_TEL like '%'||#{searchWord}||'%'
			</when>
			<when test="searchDate == 'date'">
				WHERE MEMBER_STARTDATE = #{searchDate}
			</when>
		</choose>
	</sql> -->
	
<sql id="criteria">
    <where>
        <if test="searchField == 'name'">
            AND MEMBER_NAME LIKE '%'||#{searchWord}||'%'
        </if>
        <if test="searchField == 'tel'">
            AND MEMBER_TEL LIKE '%'||#{searchWord}||'%'
        </if>
        <if test="searchDate != null">
            <!-- MEMBER_STARTDATE = TO_DATE(#{searchDate}, 'YYYY-MM-DD') -->
            AND MEMBER_STARTDATE = #{searchDate}
        </if>
    </where>
</sql>
<!-- <sql id="criteria">
    <where>
        <choose>
            <when test="searchField == 'name'">
                AND MEMBER_NAME LIKE '%'||#{searchWord}||'%'
            </when>
            <when test="searchField == 'tel'">
                AND MEMBER_TEL LIKE '%'||#{searchWord}||'%'
            </when>
        </choose>
        <when test="searchDate != null and searchDate != ''">
            AND MEMBER_STARTDATE = TO_DATE(#{searchDate}, 'YYYY-MM-DD')
        </when>
    </where>
</sql> -->
</mapper>  
